-- Most advanced egg opened
-- PS99

getgenv().autoEgg = false
getgenv().autoultimate = false
getgenv().antiafk = false

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "RocketRealms",
   LoadingTitle = "Play.RocketRealms.net",
   LoadingSubtitle = "by Peanut",
   ConfigurationSaving = { Enabled = false, FolderName = nil, FileName = "Big Hub" },
   Discord = { Enabled = false, Invite = "noinvitelink", RememberJoins = true },
   KeySystem = false
})

-- Locals
local Tab = Window:CreateTab("Eggs", 4483362458)
local Section = Tab:CreateSection("Automation!")

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Network = ReplicatedStorage:WaitForChild("Network")

-- Load EggCmds safely
local success, EggCmds = pcall(function()
    return require(ReplicatedStorage.Library.Client.EggCmds)
end)

if not success then
    warn("Failed to load EggCmds module!")
    EggCmds = nil
end

-- Function to get max egg hatch
local function getEggAmount()
    if not EggCmds then return 1 end
    local success, amount = pcall(function()
        return EggCmds.GetMaxHatch()
    end)
    return success and amount or 1
end

-- Store default hatch amount (always getMaxHatch())
getgenv().hatchAmount = getEggAmount()

local function find_nearest_egg()
    local nearest, nearest_distance = nil, math.huge
    local eggs = workspace.__THINGS:FindFirstChild("CustomEggs")

    if not eggs or #eggs:GetChildren() == 0 then return nil end

    for _, egg in ipairs(eggs:GetChildren()) do
        if egg:IsA("Model") and egg.PrimaryPart then
            local dist = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - egg.PrimaryPart.Position).Magnitude
            if dist < nearest_distance then
                nearest = egg
                nearest_distance = dist
            end
        end
    end
    return nearest
end

local function hatch_nearest_egg()
    local nearest_egg = find_nearest_egg()
    if not nearest_egg then return end

    local success, result = pcall(function()
        return Network:WaitForChild("CustomEggs_Hatch"):InvokeServer(nearest_egg.Name, getgenv().hatchAmount)
    end)
end

local Toggle = Tab:CreateToggle({
    Name = "Auto Open ? Eggs",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        getgenv().autoEgg = Value
        if Value then
            while getgenv().autoEgg and task.wait(1) do
                hatch_nearest_egg()
            end
        end
    end,
})

local function autoUltimateUser()
    while getgenv().autoultimate do
        local success, result = pcall(function()
            return Network:WaitForChild("Ultimates: Activate"):InvokeServer("Pet Surge")
        end)
        task.wait(1) -- Prevent CPU overload
    end
end

local Toggle = Tab:CreateToggle({
    Name = "Auto Ultimate",
    CurrentValue = false,
    Flag = "Toggle2",
    Callback = function(Value)
        getgenv().autoultimate = Value 
        if Value then
            task.spawn(autoUltimateUser)
        end
    end,
})

-- Disable PlayEggAnimation safely
local Eggs = game.Players.LocalPlayer.PlayerScripts.Scripts.Game:FindFirstChild('Egg Opening Frontend')
if Eggs then
    local env = getsenv(Eggs)
    if env and env.PlayEggAnimation then
        env.PlayEggAnimation = function() return end
    else
        warn("Failed to disable PlayEggAnimation: getsenv() returned nil")
    end
else
    warn("Eggs script not found!")
end

local Button = Tab:CreateButton({
    Name = "Anti AFK",
    Callback = function()
        getgenv().antiafk = true

        local VirtualUser = game:GetService("VirtualUser")
        local PlayerGui = game.Players.LocalPlayer:WaitForChild("PlayerGui")

        if PlayerGui:FindFirstChild("AntiAFKGui") then
            PlayerGui.AntiAFKGui:Destroy()
        end
        
        local function sendInput()
            VirtualUser:CaptureController()
            VirtualUser:ClickButton2(Vector2.new())
        end
        
        while getgenv().antiafk do
            sendInput()
            task.wait(300) -- Sends input every 5 minutes
        end
    end,
})
